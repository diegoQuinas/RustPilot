name: Android Emulator CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  APPIUM_VERSION: '2.0.0'

jobs:
  android-test:
    name: Run Wikipedia Showcase Test
    runs-on: macos-latest # Using macOS runner for better Android emulator performance
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build RustPilot
        run: cargo build --release
      
      - name: Setup Android SDK
        run: |
          echo "Installing Android SDK components manually"
          export ANDROID_HOME=$HOME/android-sdk
          mkdir -p $ANDROID_HOME
          
          # Download and install command line tools
          CMDLINE_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-mac-9477386_latest.zip"
          curl -L $CMDLINE_TOOLS_URL -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d $ANDROID_HOME
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          mv $ANDROID_HOME/cmdline-tools/* $ANDROID_HOME/cmdline-tools/latest/ || true
          rm -rf cmdline-tools.zip
          
          # Set up environment variables
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          
          # Install required Android SDK components
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          echo "Installing Android SDK components..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --verbose \
            "platform-tools" \
            "platforms;android-28" \
            "build-tools;30.0.3" \
            "system-images;android-28;google_apis;arm64-v8a" \
            "emulator"
          
          # Verify installation
          echo "Verifying installed packages:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list_installed
      
      - name: Install Appium
        run: |
          npm install -g appium@$APPIUM_VERSION
          npm install -g appium-uiautomator2-driver
          appium driver install uiautomator2
          appium --version
      
      - name: Start Appium Server
        run: |
          appium --log appium.log &
          echo "Waiting for Appium to start..."
          sleep 10
      
      - name: Download Wikipedia APK
        run: |
          mkdir -p ./app
          curl -L -o ./app/wikipedia.apk https://github.com/wikimedia/apps-android-wikipedia/releases/download/latest/app-alpha-universal-release.apk
          ls -la ./app/
      
      - name: Convert YAML to JSON
        run: |
          pip install pyyaml
          python -c "import yaml, json, sys; y=yaml.safe_load(open('./showcase-wikipedia-android/wikipedia.android.caps.yaml')); json.dump(y, open('./showcase-wikipedia-android/wikipedia.android.caps.json', 'w'))"
          cat ./showcase-wikipedia-android/wikipedia.android.caps.json
      
      - name: Create and configure AVD
        run: |
          # Verify emulator is installed
          if [ ! -d "$ANDROID_HOME/emulator" ]; then
            echo "Emulator directory not found, installing emulator package"
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --verbose "emulator"
          fi
          
          # Verify system image is installed
          if [ ! -d "$ANDROID_HOME/system-images/android-28/google_apis/arm64-v8a" ]; then
            echo "System image not found, installing system image"
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --verbose "system-images;android-28;google_apis;arm64-v8a"
          fi
          
          echo "Creating AVD with optimized settings"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name test-emulator \
            --package "system-images;android-28;google_apis;arm64-v8a" \
            --device "pixel" \
            --force
          
          # Optimize AVD config for faster boot
          echo "Configuring AVD for faster boot"
          echo 'hw.ramSize=2048' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'hw.cpu.ncore=2' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'hw.gpu.enabled=yes' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'hw.gpu.mode=swiftshader_indirect' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'disk.dataPartition.size=2048M' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'hw.lcd.density=240' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'hw.lcd.height=800' >> ~/.android/avd/test-emulator.avd/config.ini
          echo 'hw.lcd.width=480' >> ~/.android/avd/test-emulator.avd/config.ini
          
          # List available AVDs
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager list avd
      
      - name: Start emulator and run tests
        run: |
          # Verify emulator binary exists
          ls -la $ANDROID_HOME/emulator/
          
          # Print system architecture for debugging
          echo "System architecture:"
          uname -a
          
          # Start emulator in background with more basic options first
          echo "Starting emulator in background"
          nohup $ANDROID_HOME/emulator/emulator \
            -avd test-emulator \
            -no-window \
            -no-audio \
            -no-boot-anim \
            -gpu swiftshader \
            -no-snapshot \
            -verbose &
          
          # Wait for emulator to boot with a more robust approach
          echo "Waiting for emulator to boot..."
          max_attempts=30
          attempt=0
          boot_completed=false
          
          while [ $attempt -lt $max_attempts ] && [ "$boot_completed" = false ]; do
            attempt=$((attempt+1))
            echo "Boot attempt $attempt of $max_attempts"
            
            # Check if adb is available
            $ANDROID_HOME/platform-tools/adb devices
            
            # Check if device is online
            if $ANDROID_HOME/platform-tools/adb devices | grep -q emulator; then
              echo "Emulator detected in device list"
              
              # Check boot_completed property
              boot_prop=$($ANDROID_HOME/platform-tools/adb shell getprop sys.boot_completed 2>&1 || echo "")
              if [ "$boot_prop" = "1" ]; then
                echo "Emulator boot completed!"
                boot_completed=true
                break
              fi
            fi
            
            # Wait before next attempt
            sleep 10
          done
          
          if [ "$boot_completed" = false ]; then
            echo "Emulator failed to boot after $max_attempts attempts"
            exit 1
          fi
          
          # Show emulator status
          $ANDROID_HOME/platform-tools/adb devices
          $ANDROID_HOME/platform-tools/adb shell getprop
          
          # Run the test
          echo "Running RustPilot test..."
          ./target/release/rust_pilot ./showcase-wikipedia-android/wikipedia.android.caps.json ./showcase-wikipedia-android/run-test.yml
      
      # Archive test reports and logs as part of the workflow summary
      - name: Archive test artifacts
        if: always()
        run: |
          mkdir -p artifacts/test-reports
          mkdir -p artifacts/screenshots
          
          # Copy reports and logs
          cp -r reports/* artifacts/test-reports/ || echo "No reports found"
          cp appium.log artifacts/test-reports/ || echo "No Appium log found"
          
          # Copy screenshots
          cp *.png artifacts/screenshots/ || echo "No screenshots found"
          
          # List artifacts for verification
          echo "Test artifacts:"
          ls -la artifacts/test-reports/
          echo "Screenshot artifacts:"
          ls -la artifacts/screenshots/
