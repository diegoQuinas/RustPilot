name: Android Emulator CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  APPIUM_VERSION: '2.0.0'

jobs:
  android-test:
    name: Run Wikipedia Showcase Test
    runs-on: ubuntu-latest # Using Ubuntu for Docker support
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Build RustPilot
        run: cargo build --release
      
      - name: Download Wikipedia APK
        run: |
          mkdir -p ./app
          curl -L -o ./app/wikipedia.apk https://github.com/wikimedia/apps-android-wikipedia/releases/download/latest/app-alpha-universal-release.apk
          ls -la ./app/
      
      # Removed YAML to JSON conversion step as we now use a JSON file directly
      
      - name: Modify capabilities for Docker environment
        run: |
          # Update the capabilities file to work with Docker environment
          python -c '
          import json
          with open("./showcase-wikipedia-android/wikipedia.android.caps.json", "r") as f:
              caps = json.load(f)
          
          # Update capabilities for Docker environment
          caps["appium:platformVersion"] = "11.0"
          caps["appium:app"] = "/app/wikipedia.apk"
          
          with open("./showcase-wikipedia-android/wikipedia.android.caps.json", "w") as f:
              json.dump(caps, f, indent=2)
          '
          
          # Show updated capabilities
          cat ./showcase-wikipedia-android/wikipedia.android.caps.json
      
      - name: Run tests in Android Docker container
        run: |
          # Create a Docker network for communication between containers
          docker network create appium-network
          
          # Start Appium server in a container
          docker run -d --network appium-network --name appium-server \
            -p 4723:4723 \
            -e APPIUM_HOST=0.0.0.0 \
            -e APPIUM_LOG_LEVEL=debug \
            appium/appium:latest
          
          # Wait for Appium server to start
          echo "Waiting for Appium server to start..."
          sleep 10
          
          # Start Android emulator container
          docker run -d --network appium-network --name android-container \
            -e EMULATOR_DEVICE="Samsung Galaxy S10" \
            -e WEB_VNC=true \
            -e APPIUM_HOST=appium-server \
            -e APPIUM_PORT=4723 \
            -e CONNECT_TO_GRID=false \
            -e RELAXED_SECURITY=true \
            -v $(pwd)/app:/app \
            budtmo/docker-android:emulator_11.0
          
          # Wait for the emulator to boot completely
          echo "Waiting for Android emulator to boot (this may take a few minutes)..."
          timeout 300 bash -c 'until docker logs android-container 2>&1 | grep -q "Boot completed"; do sleep 10; echo "Still waiting for emulator boot..."; done'
          
          # Show container logs for debugging
          echo "Android container logs:"
          docker logs android-container
          
          echo "Appium server logs:"
          docker logs appium-server
          
          # Run the test in a container with access to both Appium and Android
          docker run --network appium-network --name rust-pilot-test \
            -v $(pwd):/workspace \
            -w /workspace \
            -e APPIUM_HOST=appium-server \
            -e APPIUM_PORT=4723 \
            -e ANDROID_DEVICE=android-container \
            rust:slim \
            /bin/bash -c '
              # Install required dependencies
              apt-get update && apt-get install -y curl
              
              # Run the test
              echo "Running RustPilot test..."
              ./target/release/rust_pilot \
                ./showcase-wikipedia-android/wikipedia.android.caps.json \
                ./showcase-wikipedia-android/run-test.yml
            '
      
      # Archive test reports and logs as part of the workflow summary
      - name: Archive test artifacts
        if: always()
        run: |
          mkdir -p artifacts/test-reports
          mkdir -p artifacts/screenshots
          
          # Copy reports and logs
          cp -r reports/* artifacts/test-reports/ || echo "No reports found"
          cp appium.log artifacts/test-reports/ || echo "No Appium log found"
          
          # Copy screenshots
          cp *.png artifacts/screenshots/ || echo "No screenshots found"
          
          # List artifacts for verification
          echo "Test artifacts:"
          ls -la artifacts/test-reports/
          echo "Screenshot artifacts:"
          ls -la artifacts/screenshots/
